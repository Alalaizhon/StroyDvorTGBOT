#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã
import logging
import requests
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
TOKEN = '8046616176:AAFpqPHYmQ20j0o2q2UqaIcjWrMg_rfYlVg'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –Ø–Ω–¥–µ–∫—Å–∞
OAUTH_TOKEN = 'y0_AgAAAABkPR7rAATuwQAAAAEVj9mAAAC-u4PaUR9NOZyxg5y3p_bSOsC6ag'
FOLDER_ID = 'b1gihcr2c5thnjujvrjm'
API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
messages_history = {}
user_data = {}
is_authorized = {}
user_state = {} # —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AUTH, COURSE, CHAT_WITH_GPT = range(3)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM-—Ç–æ–∫–µ–Ω–∞
def get_iam_token():
    response = requests.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        json={'yandexPassportOauthToken': OAUTH_TOKEN}
    )
    response.raise_for_status()
    return response.json()['iamToken']

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –æ–±—É—á–∞—é—â–∏–π StroyDvor –±–æ—Ç! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n'
                                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    bot.register_next_step_handler(message, get_user_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_info(message):
    user_input = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ ID
    user_data[message.from_user.id] = user_input
    is_authorized[message.from_user.id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    user_state[message.from_user.id] = COURSE  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ –§–ò–û –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    send_menu(message)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
def send_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É", "‚≠êÔ∏è –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
    keyboard.row("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
    bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é:', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
@bot.message_handler(func=lambda message: is_authorized.get(message.from_user.id, False)
                                          and user_state.get(message.from_user.id) == COURSE)
def handle_command(message):
    user_text = message.text
    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data}: {user_text}')

    if user_text == "üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É":
        course_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        course_keyboard.row("–ö—É—Ä—Å 1", "–ö—É—Ä—Å 2")
        course_keyboard.row("–ö—É—Ä—Å 3", "üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=course_keyboard)
        user_state[message.from_user.id] = COURSE  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    elif user_text in ["–ö—É—Ä—Å 1", "–ö—É—Ä—Å 2", "–ö—É—Ä—Å 3"]:
        bot.send_message(message.chat.id, 'üöß –ö—É—Ä—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥\n–ê –ø–æ–∫–∞ –ø–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –Ø–Ω–¥–µ–∫—Å GPT.')

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back_keyboard.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ø–Ω–¥–µ–∫—Å GPT. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.', reply_markup=back_keyboard)
        user_state[message.from_user.id] = CHAT_WITH_GPT  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    elif user_text == "‚≠êÔ∏è –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥":
        ranking_text = (
            "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ‚≠êÔ∏è:\n"
            "1. –ì—Ä–∏–≥–æ—Ä–∏–π - 9800 –æ—á–∫–æ–≤\n"
            "2. –ê–Ω–Ω–∞ - 9500 –æ—á–∫–æ–≤\n"
            "3. –ê–ª–µ–∫—Å–µ–π - 9200 –æ—á–∫–æ–≤\n"
            "4. –ú–∞—Ä–∏—è - 8900 –æ—á–∫–æ–≤\n"
            "5. –î–º–∏—Ç—Ä–∏–π - 8700 –æ—á–∫–æ–≤\n"
        )
        bot.send_message(message.chat.id, ranking_text)
    elif user_text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
        bot.send_message(message.chat.id, '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è.')
    elif user_text == "üîô –ù–∞–∑–∞–¥":
        send_menu(message)
        user_state[message.from_user.id] = COURSE  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –Ø–Ω–¥–µ–∫—Å GPT
@bot.message_handler(func=lambda message: is_authorized.get(message.from_user.id, False)
                                          and user_state.get(message.from_user.id) == CHAT_WITH_GPT)
def process_message(message):
    user_text = message.text
    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}')

    if user_text == "üîô –ù–∞–∑–∞–¥":
        send_menu(message)
        user_state[message.from_user.id] = COURSE  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if message.from_user.id not in messages_history:
        messages_history[message.from_user.id] = []
    messages_history[message.from_user.id].append({"role": "user", "text": user_text})

    try:
        iam_token = get_iam_token()
        logger.info(f'–ü–æ–ª—É—á–µ–Ω IAM-—Ç–æ–∫–µ–Ω: {iam_token}')
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM-—Ç–æ–∫–µ–Ω–∞: {e}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.')
        return

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt",
        "completionOptions": {"temperature": 0.3, "maxTokens": 1000},
        "messages": [
            {"role": "system", "text": "–æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"}
        ] + messages_history[message.from_user.id]  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    try:
        response = requests.post(
            API_URL,
            headers={"Accept": "application/json", "Authorization": f"Bearer {iam_token}"},
            json=data
        )
        response.raise_for_status()
        result = response.json()
        logger.info(f'–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT: {result}')

        answer = result.get('result', {}).get('alternatives', [{}])[0].get('message', {}).get('text', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.')

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages_history[message.from_user.id].append({"role": "assistant", "text": answer})
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT: {e}')
        answer = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex GPT.'

    bot.send_message(message.chat.id, answer)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()

